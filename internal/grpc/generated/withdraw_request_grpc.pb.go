// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: withdraw_request.proto

package __

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WithdrawalService_SendStreaming_FullMethodName = "/grpc.WithdrawalService/SendStreaming"
)

// WithdrawalServiceClient is the client API for WithdrawalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawalServiceClient interface {
	SendStreaming(ctx context.Context, opts ...grpc.CallOption) (WithdrawalService_SendStreamingClient, error)
}

type withdrawalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawalServiceClient(cc grpc.ClientConnInterface) WithdrawalServiceClient {
	return &withdrawalServiceClient{cc}
}

func (c *withdrawalServiceClient) SendStreaming(ctx context.Context, opts ...grpc.CallOption) (WithdrawalService_SendStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &WithdrawalService_ServiceDesc.Streams[0], WithdrawalService_SendStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &withdrawalServiceSendStreamingClient{stream}
	return x, nil
}

type WithdrawalService_SendStreamingClient interface {
	Send(*WithdrawRequest) error
	CloseAndRecv() (*WithdrawRequestResult, error)
	grpc.ClientStream
}

type withdrawalServiceSendStreamingClient struct {
	grpc.ClientStream
}

func (x *withdrawalServiceSendStreamingClient) Send(m *WithdrawRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *withdrawalServiceSendStreamingClient) CloseAndRecv() (*WithdrawRequestResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WithdrawRequestResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WithdrawalServiceServer is the server API for WithdrawalService service.
// All implementations must embed UnimplementedWithdrawalServiceServer
// for forward compatibility
type WithdrawalServiceServer interface {
	SendStreaming(WithdrawalService_SendStreamingServer) error
	mustEmbedUnimplementedWithdrawalServiceServer()
}

// UnimplementedWithdrawalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWithdrawalServiceServer struct {
}

func (UnimplementedWithdrawalServiceServer) SendStreaming(WithdrawalService_SendStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStreaming not implemented")
}
func (UnimplementedWithdrawalServiceServer) mustEmbedUnimplementedWithdrawalServiceServer() {}

// UnsafeWithdrawalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawalServiceServer will
// result in compilation errors.
type UnsafeWithdrawalServiceServer interface {
	mustEmbedUnimplementedWithdrawalServiceServer()
}

func RegisterWithdrawalServiceServer(s grpc.ServiceRegistrar, srv WithdrawalServiceServer) {
	s.RegisterService(&WithdrawalService_ServiceDesc, srv)
}

func _WithdrawalService_SendStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WithdrawalServiceServer).SendStreaming(&withdrawalServiceSendStreamingServer{stream})
}

type WithdrawalService_SendStreamingServer interface {
	SendAndClose(*WithdrawRequestResult) error
	Recv() (*WithdrawRequest, error)
	grpc.ServerStream
}

type withdrawalServiceSendStreamingServer struct {
	grpc.ServerStream
}

func (x *withdrawalServiceSendStreamingServer) SendAndClose(m *WithdrawRequestResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *withdrawalServiceSendStreamingServer) Recv() (*WithdrawRequest, error) {
	m := new(WithdrawRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WithdrawalService_ServiceDesc is the grpc.ServiceDesc for WithdrawalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.WithdrawalService",
	HandlerType: (*WithdrawalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStreaming",
			Handler:       _WithdrawalService_SendStreaming_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "withdraw_request.proto",
}
